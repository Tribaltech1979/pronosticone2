#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('pronosticone:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var pool = require('../app').pool;
//console.log(pool);



/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


////// SOCKET IO

var io = require('socket.io').listen(server);

io.on('connection', function(socket){
  ///console.log('a user connected');
    socket.on('disconnect', function(){
   /// console.log('user disconnected');
  });
socket.on('chat message', function(msg){
    io.to(msg.tid).emit('chat message', msg);
  ///  console.log("msg: "+msg.msg+" nick: "+msg.nick);
    pool.getConnection(function(err,connection){
        var ins_q = "Insert INTO Chat value ( "+msg.tid+" , "+msg.id+" , '"+msg.nick+"' , '"+msg.msg+"' , sysdate() )";
      ////  console.log(ins_q);
        connection.query(ins_q, function(err,res){
            connection.release();
        });
    });
  });
socket.on('join',function(tid){
socket.join(tid.tid);
 ////   console.log('join '+tid.tid+" id:"+tid.id);
});    
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
